//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Inputs/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""185fe18e-67b0-4ac8-8dcd-7d567cad6a29"",
            ""actions"": [
                {
                    ""name"": ""HandFoward"",
                    ""type"": ""Button"",
                    ""id"": ""d4ea13b2-7267-4f43-a0ab-7df07da540f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HandUP"",
                    ""type"": ""Button"",
                    ""id"": ""23e817bf-15df-4624-9fd7-30a8522a114b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LegFoward"",
                    ""type"": ""Button"",
                    ""id"": ""f53c14e2-e029-4a98-a227-628fed144573"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LegUP"",
                    ""type"": ""Button"",
                    ""id"": ""d7f21030-7117-44ef-9dac-ee3564167d9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7e7f4fe8-788c-4236-8e59-fa20b9595082"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandFoward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bab982ee-8664-4130-907d-032d8b8590be"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandFoward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2628218c-5e25-44b0-a8a1-07e1954be0ad"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandUP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4585f730-4815-424a-a1b9-bb9ef7dde6c3"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandUP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c575504-fd51-4632-b23d-5fe7f6e89f6c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LegFoward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9a2d5ac-2fc1-491a-a02e-a9607ec218f6"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LegFoward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b56ee15-2d4e-48d5-8fa4-e9b9144f527b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LegUP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68eec08e-cf8b-47e1-8e66-c453c7319de4"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LegUP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_HandFoward = m_Player.FindAction("HandFoward", throwIfNotFound: true);
        m_Player_HandUP = m_Player.FindAction("HandUP", throwIfNotFound: true);
        m_Player_LegFoward = m_Player.FindAction("LegFoward", throwIfNotFound: true);
        m_Player_LegUP = m_Player.FindAction("LegUP", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_HandFoward;
    private readonly InputAction m_Player_HandUP;
    private readonly InputAction m_Player_LegFoward;
    private readonly InputAction m_Player_LegUP;
    public struct PlayerActions
    {
        private @Inputs m_Wrapper;
        public PlayerActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @HandFoward => m_Wrapper.m_Player_HandFoward;
        public InputAction @HandUP => m_Wrapper.m_Player_HandUP;
        public InputAction @LegFoward => m_Wrapper.m_Player_LegFoward;
        public InputAction @LegUP => m_Wrapper.m_Player_LegUP;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @HandFoward.started += instance.OnHandFoward;
            @HandFoward.performed += instance.OnHandFoward;
            @HandFoward.canceled += instance.OnHandFoward;
            @HandUP.started += instance.OnHandUP;
            @HandUP.performed += instance.OnHandUP;
            @HandUP.canceled += instance.OnHandUP;
            @LegFoward.started += instance.OnLegFoward;
            @LegFoward.performed += instance.OnLegFoward;
            @LegFoward.canceled += instance.OnLegFoward;
            @LegUP.started += instance.OnLegUP;
            @LegUP.performed += instance.OnLegUP;
            @LegUP.canceled += instance.OnLegUP;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @HandFoward.started -= instance.OnHandFoward;
            @HandFoward.performed -= instance.OnHandFoward;
            @HandFoward.canceled -= instance.OnHandFoward;
            @HandUP.started -= instance.OnHandUP;
            @HandUP.performed -= instance.OnHandUP;
            @HandUP.canceled -= instance.OnHandUP;
            @LegFoward.started -= instance.OnLegFoward;
            @LegFoward.performed -= instance.OnLegFoward;
            @LegFoward.canceled -= instance.OnLegFoward;
            @LegUP.started -= instance.OnLegUP;
            @LegUP.performed -= instance.OnLegUP;
            @LegUP.canceled -= instance.OnLegUP;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnHandFoward(InputAction.CallbackContext context);
        void OnHandUP(InputAction.CallbackContext context);
        void OnLegFoward(InputAction.CallbackContext context);
        void OnLegUP(InputAction.CallbackContext context);
    }
}
