//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Inputs/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""185fe18e-67b0-4ac8-8dcd-7d567cad6a29"",
            ""actions"": [
                {
                    ""name"": ""LegMovement1"",
                    ""type"": ""Value"",
                    ""id"": ""d4ea13b2-7267-4f43-a0ab-7df07da540f1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LegMovement2"",
                    ""type"": ""Value"",
                    ""id"": ""abc234b1-a599-48df-a4e4-bf1a378e736e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HandMovement1"",
                    ""type"": ""Value"",
                    ""id"": ""216c9a7a-dc0f-4240-91fc-bc112e114e74"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HandMovement2"",
                    ""type"": ""Value"",
                    ""id"": ""54c793e8-de42-42ed-83d8-fc6918f0b947"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a58f1ea6-440f-416d-bc60-df1d6a8d91f0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LegMovement1"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""67f1883c-2f16-402b-8b1e-0ca50215f6ad"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LegMovement1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""57caf70f-54e9-4b0b-b956-2ed06b883cfc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LegMovement1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""59ccd1c7-6280-4e12-807f-989351003ef7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LegMovement2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""558203f0-c708-4eec-9c1c-fcb9d5c2d93e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LegMovement2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""cc8e6395-bd78-48a4-ba9c-3356ccdafd37"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LegMovement2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""7a965d3d-4375-4ec6-9cd0-83402eeeea6e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandMovement1"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9c3f6670-79d0-4d2c-8529-d35bce2dbb30"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandMovement1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e33d25a9-b376-438a-983c-49d49cba7f23"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandMovement1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""03acb103-9d9c-45fc-a05e-0c0bb2be6020"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandMovement2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""891171d4-b148-4fb3-9c85-a1985762cfa4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandMovement2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9178f127-5f9d-4eae-a7a2-a6af6616da63"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandMovement2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_LegMovement1 = m_Player.FindAction("LegMovement1", throwIfNotFound: true);
        m_Player_LegMovement2 = m_Player.FindAction("LegMovement2", throwIfNotFound: true);
        m_Player_HandMovement1 = m_Player.FindAction("HandMovement1", throwIfNotFound: true);
        m_Player_HandMovement2 = m_Player.FindAction("HandMovement2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_LegMovement1;
    private readonly InputAction m_Player_LegMovement2;
    private readonly InputAction m_Player_HandMovement1;
    private readonly InputAction m_Player_HandMovement2;
    public struct PlayerActions
    {
        private @Inputs m_Wrapper;
        public PlayerActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @LegMovement1 => m_Wrapper.m_Player_LegMovement1;
        public InputAction @LegMovement2 => m_Wrapper.m_Player_LegMovement2;
        public InputAction @HandMovement1 => m_Wrapper.m_Player_HandMovement1;
        public InputAction @HandMovement2 => m_Wrapper.m_Player_HandMovement2;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @LegMovement1.started += instance.OnLegMovement1;
            @LegMovement1.performed += instance.OnLegMovement1;
            @LegMovement1.canceled += instance.OnLegMovement1;
            @LegMovement2.started += instance.OnLegMovement2;
            @LegMovement2.performed += instance.OnLegMovement2;
            @LegMovement2.canceled += instance.OnLegMovement2;
            @HandMovement1.started += instance.OnHandMovement1;
            @HandMovement1.performed += instance.OnHandMovement1;
            @HandMovement1.canceled += instance.OnHandMovement1;
            @HandMovement2.started += instance.OnHandMovement2;
            @HandMovement2.performed += instance.OnHandMovement2;
            @HandMovement2.canceled += instance.OnHandMovement2;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @LegMovement1.started -= instance.OnLegMovement1;
            @LegMovement1.performed -= instance.OnLegMovement1;
            @LegMovement1.canceled -= instance.OnLegMovement1;
            @LegMovement2.started -= instance.OnLegMovement2;
            @LegMovement2.performed -= instance.OnLegMovement2;
            @LegMovement2.canceled -= instance.OnLegMovement2;
            @HandMovement1.started -= instance.OnHandMovement1;
            @HandMovement1.performed -= instance.OnHandMovement1;
            @HandMovement1.canceled -= instance.OnHandMovement1;
            @HandMovement2.started -= instance.OnHandMovement2;
            @HandMovement2.performed -= instance.OnHandMovement2;
            @HandMovement2.canceled -= instance.OnHandMovement2;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnLegMovement1(InputAction.CallbackContext context);
        void OnLegMovement2(InputAction.CallbackContext context);
        void OnHandMovement1(InputAction.CallbackContext context);
        void OnHandMovement2(InputAction.CallbackContext context);
    }
}
